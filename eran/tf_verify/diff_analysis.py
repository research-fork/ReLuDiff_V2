import sys, csv, time, re
from collections import OrderedDict
sys.path.insert(0, '../ELINA/python_interface/')
from read_net_file import *
from eran import ERAN
from analyzer import *

import numpy as np

nnetPrefix = "../NNet/nnet/"

"""
Does the same thing as getEps, but using subtract output neurons.
Requires that the nnet does not have the final "subtraction layer".
"""
def getEps2(eran, specLB, specUB, target, numOutputs):
    specLB = np.reshape(specLB, (-1,))
    specUB = np.reshape(specUB, (-1,))
    nn = layers()
    nn.specLB = specLB
    nn.specUB = specUB
    execute_list = eran.optimizer.get_deeppoly(specLB, specUB)

    start = time.clock()
    analyzer = Analyzer(execute_list, nn, "deeppoly", 0, 0, 0, True)
    element, lb, ub = analyzer.get_abstract0()
    res = subtract_output_neurons(analyzer.man, element, target, target + numOutputs, True)
    elapsed = time.clock() - start
    elina_abstract0_free(analyzer.man, element)
    return (elapsed, res.contents.sup.contents.val.dbl, res.contents.inf.contents.val.dbl)

ACASExps = {}
ACASSkips = {}
ACASExps[1]=".*"
ACASSkips[1]="x"
#ACASExps[2]="[2-9]_[0-9]"
#ACASSkips[2]="5_3|4_2"
ACASExps[3]=".*"
ACASSkips[3]="1_[7-9]"
ACASExps[4]=".*"
ACASSkips[4]="1_[7-9]"
ACASExps[5]="1_1"
ACASSkips[5]="x"
ACASExps[16]="1_1"
ACASSkips[16]="x"
ACASExps[26]="1_1"
ACASSkips[26]="x"
ACASExps[7]="1_9"
ACASSkips[7]="x"
ACASExps[8]="2_9"
ACASSkips[8]="x"
ACASExps[9]="3_3"
ACASSkips[9]="x"
ACASExps[10]="4_5"
ACASSkips[10]="x"
ACASExps[11]="1_1"
ACASSkips[11]="x"
ACASExps[12]="3_3"
ACASSkips[12]="x"
ACASExps[13]="1_1"
ACASSkips[13]="x"
ACASExps[14]="4_1|5_1"
ACASSkips[14]="x"
ACASExps[15]="4_1|5_1"
ACASSkips[15]="x"

ACASNnets = [
"ACASXU_run2a_1_1_batch_2000_16bit.pyt", "ACASXU_run2a_2_8_batch_2000_16bit.pyt",  "ACASXU_run2a_4_6_batch_2000_16bit.pyt",
"ACASXU_run2a_1_2_batch_2000_16bit.pyt",  "ACASXU_run2a_2_9_batch_2000_16bit.pyt",  "ACASXU_run2a_4_7_batch_2000_16bit.pyt",
"ACASXU_run2a_1_3_batch_2000_16bit.pyt",  "ACASXU_run2a_3_1_batch_2000_16bit.pyt",  "ACASXU_run2a_4_8_batch_2000_16bit.pyt",
"ACASXU_run2a_1_4_batch_2000_16bit.pyt",  "ACASXU_run2a_3_2_batch_2000_16bit.pyt",  "ACASXU_run2a_4_9_batch_2000_16bit.pyt",
"ACASXU_run2a_1_5_batch_2000_16bit.pyt",  "ACASXU_run2a_3_3_batch_2000_16bit.pyt",  "ACASXU_run2a_5_1_batch_2000_16bit.pyt",
"ACASXU_run2a_1_6_batch_2000_16bit.pyt",  "ACASXU_run2a_3_4_batch_2000_16bit.pyt",  "ACASXU_run2a_5_2_batch_2000_16bit.pyt",
"ACASXU_run2a_1_7_batch_2000_16bit.pyt",  "ACASXU_run2a_3_5_batch_2000_16bit.pyt",  "ACASXU_run2a_5_3_batch_2000_16bit.pyt",
"ACASXU_run2a_1_8_batch_2000_16bit.pyt",  "ACASXU_run2a_3_6_batch_2000_16bit.pyt",  "ACASXU_run2a_5_4_batch_2000_16bit.pyt",
"ACASXU_run2a_1_9_batch_2000_16bit.pyt",  "ACASXU_run2a_3_7_batch_2000_16bit.pyt",  "ACASXU_run2a_5_5_batch_2000_16bit.pyt",
"ACASXU_run2a_2_1_batch_2000_16bit.pyt",  "ACASXU_run2a_3_8_batch_2000_16bit.pyt",  "ACASXU_run2a_5_6_batch_2000_16bit.pyt",
"ACASXU_run2a_2_2_batch_2000_16bit.pyt",  "ACASXU_run2a_3_9_batch_2000_16bit.pyt",  "ACASXU_run2a_5_7_batch_2000_16bit.pyt",
"ACASXU_run2a_2_3_batch_2000_16bit.pyt",  "ACASXU_run2a_4_1_batch_2000_16bit.pyt",  "ACASXU_run2a_5_8_batch_2000_16bit.pyt",
"ACASXU_run2a_2_4_batch_2000_16bit.pyt",  "ACASXU_run2a_4_2_batch_2000_16bit.pyt",  "ACASXU_run2a_5_9_batch_2000_16bit.pyt",
"ACASXU_run2a_2_5_batch_2000_16bit.pyt",  "ACASXU_run2a_4_3_batch_2000_16bit.pyt",  "ACASXU_run2a_2_6_batch_2000_16bit.pyt",
"ACASXU_run2a_4_4_batch_2000_16bit.pyt",  "ACASXU_run2a_2_7_batch_2000_16bit.pyt",  "ACASXU_run2a_4_5_batch_2000_16bit.pyt"
]

ACASProps = OrderedDict([
    (1 , (0, [0.679857730865478515625000000000, 0.499999880790710449218750000000, 0.499999880790710449218750000000, 0.500000000000000000000000000000, -0.449999988079071044921875000000, ],
[0.600000023841857910156250000000, -0.499999880790710449218750000000, -0.499999880790710449218750000000, 0.449999988079071044921875000000, -0.500000000000000000000000000000, ])),
    (3 , (0, [-0.298552811145782470703125000000, 0.009549296461045742034912109375, 0.499999880790710449218750000000, 0.500000000000000000000000000000, 0.500000000000000000000000000000, ],
[-0.303531169891357421875000000000, -0.009549296461045742034912109375, 0.493380308151245117187500000000, 0.300000011920928955078125000000, 0.300000011920928955078125000000, ])),
    (4 , (0, [-0.298552811145782470703125000000, 0.009549296461045742034912109375, 0.000000000000000000000000000000, 0.500000000000000000000000000000, 0.166666671633720397949218750000, ],
[-0.303531169891357421875000000000, -0.009549296461045742034912109375, 0.000000000000000000000000000000, 0.318181812763214111328125000000, 0.083333335816860198974609375000, ])),
    (5 , (4, [-0.321785092353820800781250000000, 0.063661977648735046386718750000, -0.499204218387603759765625000000, -0.227272734045982360839843750000, -0.166666671633720397949218750000, ],
[-0.324274271726608276367187500000, 0.031830988824367523193359375000, -0.499999970197677612304687500000, -0.500000000000000000000000000000, -0.500000000000000000000000000000, ])),
    (16 , (0, [0.679857730865478515625000000000, -0.111408457159996032714843750000, -0.499204099178314208984375000000, -0.409090906381607055664062500000, 0.500000000000000000000000000000, ],
[-0.129289120435714721679687500000, -0.499999880790710449218750000000, -0.499999880790710449218750000000, -0.500000000000000000000000000000, -0.500000000000000000000000000000, ])),
    (26 , (0, [0.679857730865478515625000000000, 0.499999880790710449218750000000, -0.499204099178314208984375000000, -0.409090906381607055664062500000, 0.500000000000000000000000000000, ],
[-0.129289120435714721679687500000, 0.111408457159996032714843750000, -0.499999880790710449218750000000, -0.500000000000000000000000000000, -0.500000000000000000000000000000, ])),
    (7 , (4, [0.679857730865478515625000000000, 0.499999880790710449218750000000, 0.499999880790710449218750000000, 0.500000000000000000000000000000, 0.500000000000000000000000000000, ],
[-0.328422904014587402343750000000, -0.499999880790710449218750000000, -0.499999880790710449218750000000, -0.500000000000000000000000000000, -0.500000000000000000000000000000, ])),
    (8 , (1, [0.679857730865478515625000000000, -0.374999910593032836914062500000, 0.015915494412183761596679687500, 0.500000000000000000000000000000, 0.500000000000000000000000000000, ],
[-0.328422904014587402343750000000, -0.499999880790710449218750000000, -0.015915494412183761596679687500, -0.045454546809196472167968750000, 0.000000000000000000000000000000, ])),
    (9 , (3, [-0.212261527776718139648437500000, -0.022281691431999206542968750000, -0.498408347368240356445312500000, -0.454545468091964721679687500000, -0.375000000000000000000000000000, ],
[-0.295233935117721557617187500000, -0.063661977648735046386718750000, -0.499999880790710449218750000000, -0.500000000000000000000000000000, -0.500000000000000000000000000000, ])),
    (10 , (0, [0.679857730865478515625000000000, 0.499999880790710449218750000000, -0.498408347368240356445312500000, 0.500000000000000000000000000000, 0.500000000000000000000000000000, ],
[0.268978416919708251953125000000, 0.111408457159996032714843750000, -0.499999880790710449218750000000, 0.227272734045982360839843750000, 0.000000000000000000000000000000, ])),
    (11 , (4, [-0.321785092353820800781250000000, 0.063661977648735046386718750000, -0.499204218387603759765625000000, -0.227272734045982360839843750000, -0.166666671633720397949218750000, ],
[-0.324274271726608276367187500000, 0.031830988824367523193359375000, -0.499999970197677612304687500000, -0.500000000000000000000000000000, -0.500000000000000000000000000000, ])),
    (12 , (0, [0.679857730865478515625000000000, 0.499999880790710449218750000000, 0.499999880790710449218750000000, 0.500000000000000000000000000000, -0.449999988079071044921875000000, ],
[0.600000023841857910156250000000, -0.499999880790710449218750000000, -0.499999880790710449218750000000, 0.449999988079071044921875000000, -0.500000000000000000000000000000, ])),
    (13 , (0, [0.679857730865478515625000000000, 0.499999880790710449218750000000, 0.499999880790710449218750000000, -0.263636350631713867187500000000, -0.200000002980232238769531250000, ],
[0.667245924472808837890625000000, -0.499999880790710449218750000000, -0.499999880790710449218750000000, -0.500000000000000000000000000000, -0.500000000000000000000000000000, ])),
    (14 , (4, [-0.321785092353820800781250000000, 0.063661977648735046386718750000, -0.499204218387603759765625000000, -0.227272734045982360839843750000, -0.166666671633720397949218750000, ],
[-0.324274271726608276367187500000, 0.031830988824367523193359375000, -0.499999970197677612304687500000, -0.500000000000000000000000000000, -0.500000000000000000000000000000, ])),
    (15 , (3, [-0.321785092353820800781250000000, -0.031830988824367523193359375000, -0.499204218387603759765625000000, -0.227272734045982360839843750000, -0.166666671633720397949218750000, ],
[-0.324274271726608276367187500000, -0.063661977648735046386718750000, -0.499999970197677612304687500000, -0.500000000000000000000000000000, -0.500000000000000000000000000000, ])),
])

def runACAS():
    epsilon = 0.05
    numInputs = 5

    erans = {}
    for nnet in ACASNnets:
        nnetPath = nnetPrefix + nnet
        model, is_conv, means, stds = read_net(nnetPath, numInputs, False)
        erans[nnet] = ERAN(model)

    for prop, test in ACASProps.items():
        target, specUB, specLB = test
        print("Property: " + str(prop))
        for nnet in ACASNnets:
            if re.search(ACASExps[prop], nnet) and not re.search(ACASSkips[prop], nnet):
                print("Network: " + nnet)
                res = getEps2(erans[nnet], specLB, specUB, target, 5)
                print("Result: " + str(res))
                if abs(res[1]) < epsilon and abs(res[2]) < epsilon:
                    print("Verified")
                else:
                    print("Failed")




random_pixels = [
[770,148,25,503,664,219,750,351,115,188],
[743,240,781,701,10,458,417,777,130,325],
[408,771,153,438,471,468,87,98,338,624],
[338,696,205,709,303,248,91,449,489,255],
[107,189,524,483,694,219,14,130,759,406],
[359,532,396,538,29,216,422,736,157,4],
[461,182,552,212,647,144,731,629,510,179],
[614,208,520,628,561,339,368,745,611,563],
[434,611,628,481,709,436,582,593,334,457],
[24,556,18,445,459,8,301,86,463,180],
[519,315,702,598,664,783,418,114,31,734],
[296,572,570,497,565,723,48,209,305,13],
[611,343,140,351,557,190,113,137,514,540],
[100,225,395,623,200,630,615,637,650,417],
[176,662,393,652,402,523,103,166,121,601],
[33,141,684,118,7,395,293,566,739,178],
[372,448,312,457,401,42,622,215,518,614],
[560,315,427,484,772,43,600,754,611,556],
[692,343,162,172,475,544,462,618,523,516],
[496,761,78,170,49,201,641,648,75,305],
[191,695,557,490,98,402,175,679,774,48],
[706,638,241,143,400,646,554,498,731,520],
[170,499,392,715,563,44,742,169,105,724],
[157,240,245,637,61,192,80,514,13,87],
[116,575,775,411,698,66,225,777,645,621],
[24,674,589,306,700,95,166,153,73,652],
[369,105,323,365,671,595,527,731,631,537],
[30,387,132,34,417,145,377,558,361,15],
[145,173,171,653,662,563,364,307,749,389],
[732,757,59,445,598,301,134,601,609,587],
[18,634,661,53,487,293,718,374,54,347],
[717,296,20,607,710,412,602,672,131,144],
[21,13,582,729,588,699,189,504,137,300],
[182,248,90,610,256,623,448,237,624,158],
[707,712,536,346,364,193,534,449,180,458],
[471,353,187,706,4,491,764,409,498,702],
[86,420,95,131,157,326,669,455,97,563],
[94,174,426,354,70,573,604,429,519,617],
[612,463,419,228,771,711,235,414,724,125],
[669,433,584,100,211,339,143,535,195,620],
[249,204,605,181,303,326,364,592,585,323],
[653,94,341,617,137,537,751,63,159,148],
[331,274,760,626,293,730,360,79,465,9],
[729,485,680,142,4,168,667,213,294,53],
[764,415,102,197,416,91,630,467,577,385],
[48,578,764,115,105,490,291,332,562,234],
[193,591,652,231,452,76,632,346,338,389],
[244,467,237,319,746,250,616,247,290,32],
[779,560,49,251,107,409,737,696,50,446],
[123,419,711,88,752,218,102,201,198,6],
[14,717,719,70,589,385,543,577,339,627],
[437,526,314,31,345,407,208,124,342,296],
[410,146,291,668,316,750,623,483,370,271],
[482,774,145,588,379,266,226,131,465,408],
[749,771,690,545,763,304,241,369,354,672],
[413,40,14,127,188,96,459,6,211,3],
[461,364,712,506,442,647,525,337,309,105],
[219,376,569,510,15,413,208,778,24,211],
[338,321,373,540,708,219,272,683,151,729],
[207,625,549,163,596,297,524,552,652,309],
[85,417,105,597,23,602,469,161,615,115],
[208,124,695,753,444,28,139,678,197,594],
[391,188,636,717,660,98,467,114,203,91],
[528,165,409,39,302,430,742,271,568,223],
[45,738,695,472,513,341,226,85,272,16],
[521,467,191,686,175,132,160,243,225,527],
[294,627,469,397,282,401,100,259,724,674],
[18,530,751,636,321,421,366,134,84,218],
[519,642,491,258,59,233,13,263,637,12],
[677,88,54,506,208,642,394,691,577,410],
[360,564,764,760,496,10,133,456,85,781],
[39,444,112,107,427,610,513,639,449,228],
[381,161,722,413,191,561,625,181,576,41],
[243,588,147,279,128,405,184,102,781,537],
[410,200,243,478,346,498,765,738,608,96],
[94,418,587,661,624,150,143,589,286,702],
[333,307,188,749,280,108,60,330,19,579],
[130,755,545,155,643,729,640,578,62,50],
[255,500,32,334,112,45,111,329,692,141],
[759,19,343,220,695,452,701,166,329,778],
[737,52,460,51,322,38,728,204,45,125],
[683,666,721,670,162,486,43,742,506,264],
[469,614,447,67,756,19,5,74,291,581],
[533,573,483,721,423,668,182,190,128,298],
[654,324,76,351,598,682,506,40,259,429],
[474,225,403,107,83,112,79,494,135,366],
[239,558,553,398,281,435,479,87,259,35],
[722,328,133,545,668,383,226,554,132,121],
[428,180,612,453,317,684,766,407,698,464],
[558,421,654,624,185,469,647,575,279,563],
[542,504,14,412,32,175,605,89,184,561],
[1,740,308,681,76,203,369,272,66,406],
[563,235,565,612,55,371,72,84,724,192],
[296,540,295,703,464,9,319,365,519,286],
[668,128,274,131,186,83,603,268,772,214],
[598,775,783,382,174,539,758,484,49,713],
[182,134,772,451,89,277,765,389,273,164],
[699,674,222,663,234,281,116,169,262,692],
[30,354,2,438,106,673,421,505,267,215],
[239,141,184,428,687,684,178,290,127,632],
]

def runMNIST3Pixel():
    nnets = [
        nnetPrefix + "/mnist_relu_3_100_16bit.pyt",
        nnetPrefix + "/mnist_relu_2_512_16bit.pyt",
        nnetPrefix + "/mnist_relu_4_1024_16bit.pyt"
        ]
    perturb = 3
    epsilon = 1.0
    numInputs = 784
    numPixels = 3

    csvfile = open('../data/mnist_test.csv', 'r')
    images = csv.reader(csvfile, delimiter=',')
    tests = []
    for i, image in enumerate(images):
        target = int(image[0])
        image = np.float64(image[1:])
        specLB = np.copy(image)
        specUB = np.copy(image)
        for j in range(numPixels):
            specLB[random_pixels[i][j]] = 0.0
            specUB[random_pixels[i][j]] = 255.0
        specLB = specLB / np.float64(255)
        specUB = specUB / np.float64(255)
        tests.append((target, specLB, specUB))

    for nnet in nnets:
        print("Network: " + nnet.split("/")[-1], file=sys.stderr)
        model, is_conv, means, stds = read_net(nnet, numInputs, False)
        eran = ERAN(model)
        for target, lb, ub in tests:
            res = getEps2(eran, lb, ub, target, 10)
            print("Result: " + str(res), file=sys.stderr)
            if abs(res[1]) < epsilon and abs(res[2]) < epsilon:
                print("Verified", file=sys.stderr)
            else:
                print("Failed", file=sys.stderr)


def runMNIST():
    nnets = [
        nnetPrefix + "/mnist_relu_3_100_16bit.pyt",
        nnetPrefix + "/mnist_relu_2_512_16bit.pyt",
        nnetPrefix + "/mnist_relu_4_1024_16bit.pyt"
        ]
    perturb = 3
    epsilon = 1.0
    numInputs = 784

    csvfile = open('../data/mnist_test.csv', 'r')
    images = csv.reader(csvfile, delimiter=',')
    tests = []
    for image in images:
        target = int(image[0])
        image = np.float64(image[1:])
        specLB = np.copy(image)
        specUB = np.copy(image)
        specLB = np.clip(specLB - perturb, 0, 255)
        specUB = np.clip(specUB + perturb, 0, 255)
        specLB = specLB / np.float64(255)
        specUB = specUB / np.float64(255)
        tests.append((target, specLB, specUB))

    for nnet in nnets:
        print("Network: " + nnet.split("/")[-1], file=sys.stderr)
        model, is_conv, means, stds = read_net(nnet, numInputs, False)
        eran = ERAN(model)
        for target, lb, ub in tests:
            res = getEps2(eran, lb, ub, target, 10)
            print("Result: " + str(res), file=sys.stderr)
            if abs(res[1]) < epsilon and abs(res[2]) < epsilon:
                print("Verified", file=sys.stderr)
            else:
                print("Failed", file=sys.stderr)


def runHAR():
    nnet = nnetPrefix + "/HAR_16bit.pyt"

    perturb = 0.1
    epsilon = 0.25
    numInputs = 561

    csvfile = open('../data/har_test.csv', 'r')
    testInputs = csv.reader(csvfile, delimiter=',')
    tests = []
    for testInput in testInputs:
        target = int(testInput[0])
        testInput = np.float64(testInput[1:])
        specLB = np.copy(testInput)
        specUB = np.copy(testInput)
        specLB = np.clip(specLB - perturb, -1, 1)
        specUB = np.clip(specUB + perturb, -1, 1)
        tests.append((target, specLB, specUB))

    model, is_conv, means, stds = read_net(nnet, numInputs, False)
    eran = ERAN(model)
    for target, lb, ub in tests:
            res = getEps2(eran, lb, ub, target, 6)
            print("Result: " + str(res), file=sys.stderr)
            if abs(res[1]) < epsilon and abs(res[2]) < epsilon:
                print("Verified", file=sys.stderr)
            else:
                print("Failed", file=sys.stderr)


if __name__ == '__main__':
    if len(sys.argv) != 2 or sys.argv[1] not in ["acas", "mnist-global", "mnist-3pixel", "har"]:
        print("usage: python3 " + sys.argv[0] + " EXP")
        print("where EXP is one of 'acas', 'mnist-global', 'mnist-3pixel', or 'har'")
        exit(1)

    exp = sys.argv[1]
    if exp == "acas":
        runACAS()
    elif exp == "mnist-global":
        runMNIST()
    elif exp == "mnist-3pixel":
        runMNIST3Pixel()
    else:
        runHAR()
